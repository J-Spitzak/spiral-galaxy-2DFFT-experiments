#!/usr/bin/env python3

##
## P2PA - Analyze P2DFFT output to determine pitch angles using sum of
##        FFT data
##
## Program to calculate and plot data output from P2DFFT program.  This program
##   will take the FFT output data from P2DFFT and sum it together to create
##   integrated frequency curves.  By default, the program will use all annuli,
##   but this can be changed using command line arguments.
##
##   The text output file will have the following columns (in order):
##
##      File        - File name (minus .fits extension)
##      Start       - Lowest annuli radius
##      End         - Largest annuli radius
##      Mode        - The mode based on the highest total amplitude
##      PA          - Pitch angle value based on highest amplitude
##      Error       - Error calculated based on Davis, et. al. 2012
##      Mode Method - Amp-maximum amplitude/ARMS-from keyword/Man-manual
##      Bar Method  - BAR-from keyword/Man-manual/None-(-s option)
##
##
## Version 1.5  20-Jun-2019
##
##
## Authors:  Ian Hewitt & Dr. Patrick Treuthardt,
##           NC Museum of Natural Sciences,
##           Astronomy & Astrophysics Lab,
##           Raleigh, NC USA.
##           http://github.com/treuthardt/P2DFFT
##
##
## LICENSE
##
## P2DFFT Spiral Galaxy Arm Pitch Angle Analysis Suite
## Copyright (c) 2016-2019  Ian B. Hewitt & Dr. Patrick Treuthardt
##
## The program is free software:  you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by the Free
## Software Foundation, version 3.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
## details. 
##
## You should have received a copy of the GNU General Public License along with
## this program.  If not, see < https://www.gnu.org/licenses >.
##
## The authors can be contacted at:
##
##      North Carolina Museum of Natural Sciences
##      Astronomy & Astrophysics Laboratory
##      11 West Jones Street
##      Raleigh, NC, 27601  USA
##      +1.919.707.9800
## 
##      -- or --
##
##      patrick.treuthardt@naturalsciences.org
##
##
## Usage: p2pa [-p|--plot] [-s|--start <num>] [-e|--end <num>]
##             [-o|--output <name>] [-a|--arms <1-6>] [-w|--warning]
##             [-n|--nobar] [-m|--magnitude] <file> [<file>...]
##
##   You must specify at least one argument.
##
##   <files>          (Required) The name of the files to be processed.  Can be
##                    multiple/wildcard values and can include the .fits/.fts
##                    extension (which will be stripped) or just the prefix.
##   -p|--plot        (Optional) Produce pdf plot for each input file
##   -s|--start <arg> (Optional) Initial starting annuli for calculations
##   -e|--end <arg>   (Optional) Ending starting annuli for calculations
##   -o|--output      (Optional) The name of the output text file (default is
##                    Results.csv).
##   -n|--nobar       (Optional) Ignore the BAR FTIS header value (if given).
##                    Will be default if no BAR header value is found (starting
##                    radius is 0) and -s is not specified.
##   -m|--magnitude   (Optional) Ignore the ARM FTIS header value (if given)
##                    and will use the largest magnitude value to determine the
##                    mode.  Will be default if no ARM header value is found
##                    or -a is specified.
##   -a|--arms        (Optional) Force the preferred mode number.  This option
##                    will override the use of max amplitude to select the mode.
##   -w|--warning     (Optional) Print warnings for invalid data, etc.
##
##
##  Revision History:
##         V1.5 - 20-Jun-2019 - Small cleanup changes
##                            - Add mode method and bar method output fields
##         V1.4 - 03-May-2019 - Fix bug in plotting caused by removal of pylab
##                            - Fix bug with -m option
##                            - Remove status print to DEBUG only and fix
##                              formatting
##                            - Add numpy array functions to increase
##                              performance
##                            - Remove deprecated code
##         V1.3 - 13-Feb-2019 - Change behavior to use ARM and BAR FTIS header
##                              values to idetify ARMS and starting radius
##                              unless -a/-s options specfied
##                            - Add -n and -m options to ovveride default
##                              values
##                            - Fix bug where highest amplitude would not be
##                              calculated when -p selected
##                            - Remove deprecated libraries
##         V1.2 - 13-Dec-2018 - Significant rewrite to sum individual FFT
##                              components and then derive the amplitude
##                              curves
##                            - Change plotting code to only plot freq/amp
##                            - Rename to pa.py (was fit.py then vfit.py)
##                            - Remove Python version detection.  Just assume
##                              Python 3.x+
##                            - Update print statements to be Python-3 style
##                            - Change default extension on output file to .csv
##                            - Remove -i option because it was deprecated
##         V1.1 - 14-Oct-2018 - Fix bug in PDF output
##         V1.0 - 19-Jun-2018 - Initial version created from new_avg.py
##
##
##  Requirements/Environment:
##
##     Python 3.x
##     Numpy (tested with python3-numpy)
##     Matplotlib (tested with python3-matplotlib)
##
##
##  References:
##
##      Davis, Benjamin L., Berrier, Joel C., Shields, Douglas W., Kennefick,
##          Julia, Kennefick, Daniel, Seigar, Marc S., Lacy, Claud H.S., &
##          Puerari, Ivanio, 2012, ApJS, 199, 33
##


##
## LIBRARIES/IMPORTS
##

##
## System Libraries 
##

import os
import re
import sys
import math
import fnmatch
import argparse

##
## Python Libraries
##

import numpy as np
import matplotlib
import matplotlib.pyplot as plt

##
## Python Function Imports
##

from matplotlib.backends.backend_pdf import PdfPages
from pathlib import Path
from astropy.io import fits

##
## If you will be using the program without a valid X-server environment,
##   uncomment the following line
##

##matplotlib.use('Agg')

##
## MAIN PROGRAM
##

##
## CONSTANTS:
##
##   VERSION=   String that prints on output to identify version used to
##              produce the results
##   EXCLUDE  = Set to true to not use the last 10% of the annuli, per
##              Davis et. al. 2012, ApJ, 199, 33
##   STEP_P   = The frequency step size in the P2DFFT intermediate output
##              files.  This only needs to change if P2DFFT is modified.
##   DEBUG    = Controls debugging/status information printed to stdout.  0
##              will cause no information to be printed, 1 will print basic
##              information and 2 will cause detailed information to be
##              output.  If you use 2, you may want to redirect output to a
##              file...
##   MIN_FREQ = The smallest frequency in the intermediate output files.
##              This only needs to change if P2DFFT is modified.
##   FREQ_STEPS = The number of total steps in the intermediate output files.
##   MIN_MODE = Lowest mode number
##   MAX_MODE = Highest mode number
##   MAXRAD   = Maximum radius value
##

VERSION='1.5/20190620'
EXCLUDE=True
STEP_P=0.25
DEBUG=0
MIN_FREQ=-50.0
FREQ_STEPS=401
MIN_MODE=1
MAX_MODE=6
MAXRAD=1024

print('p2pa Version: ',VERSION)

##
## Get command line arguments using argparse.
##

options = argparse.ArgumentParser(description="This Utility Will Plot the Results From P2DFFT")
options.add_argument('files',help='Input File Names', nargs='+')
options.add_argument('-o','--output',help='Name of Output File - Optional',required=False)
options.add_argument('-e','--end',help='End Radius for Calculation - Optional',type=int,required=False)
options.add_argument('-s','--start',help='Starting Radius for Calculation - Optional',type=int,required=False)
options.add_argument('-p','--plot',help='Produce PDF Plots - Optional',action="store_true",default=False)
options.add_argument('-w','--warning',help='Print Warnings - Optional',action="store_true",default=False)
options.add_argument('-n','--nobar',help='Ignore the BAR Field in the FITS File - Optional',action="store_true",default=False)
options.add_argument('-m','--magnitude',help='Select Mode by Magnitude and Not the ARMS Header Value - Optional',action="store_true",default=False)
options.add_argument('-a','--arms',help='Force Preferred Mode - Optional',type=int,required=False)
args=options.parse_args()

##
## Do Initial Checking of Command Line Arguments
##

if args.start:
    if  (args.start < 0) or (args.start > MAXRAD):
        sys.exit('ERROR: Invalid -s option value: '+str(args.start))
    if args.end:
        if (args.start > args.end):
            sys.exit('ERROR: Invalid -s option value: '+str(args.start))

##
## Open an output file to record the results   This is a tab delimited CSV
##   file with header rows.  
##

if args.output:
    result_file = open(args.output,'w')
else:
    result_file = open('Results.csv','w')

if not result_file:
    if args.output:
        sys.exit('ERROR: Could not open: '+args.output)
    else:
        sys.exit('ERROR: Could not open: ./Results.csv')

result_file.write('File\tStart\tEnd\tMode\tPitch Angle (P)\tError\tMode Method\tArm Method\n')

##
## Set up list of files to be processed
##

if  not args.files:
    sys.exit('ERROR: No Files to Process')

##
##  Main loop to process all the files
##

file_ctr=0
err_ctr=0

for filename in args.files:
    file_ctr+=1

    if DEBUG > 0:
        print('File Number ',str(file_ctr),' Name ',filename)

##
## Make sure file exists
##

    if not os.path.exists(filename):
        err_ctr+=1
        if args.warning:
            print('WARNING: Filename ',filename,' Not Found...Skipping')
        continue

##
## Try to get BAR and ARM keyword values
##

    if not filename.endswith('.fits') and not filename.endswith('.fts'):
        hdu=fits.open(filename+'.fits')
    else:
        hdu=fits.open(filename)

    hdr=hdu[0].header

    if 'ARMS' in hdr:
        ARMS=int(hdr['ARMS'])
    else:
        ARMS=0

    if 'BAR' in hdr:
        BAR=int(hdr['BAR'])
    else:
        BAR=1

    hdu.close()

##
## Break the file into its components
##

    arg_path=os.path.abspath(filename)
    arg_dir=os.path.dirname(filename)
    arg_file=os.path.basename(filename)
    if arg_file.endswith('.fits') or arg_file.endswith('.fts'):
        arg_pair=os.path.splitext(arg_file)
        prefix=arg_pair[0]
    else:
        prefix=argfile
        argfile=argfile+'.fits'

    if arg_dir:
        d_prefix=arg_dir+'/'+prefix
    else:
        d_prefix=prefix

    if DEBUG > 0:
        print('Dir ',arg_dir,' Prefix ',prefix,' Dprefix ',d_prefix)

##
## Open an file and determine the number of entries (radius).  Although
##   this varies from image to image, it is the same across each set of m0-m6
##   files.
##

    num_lines=0
    with open(d_prefix+'_m0','r', encoding='windows-1252') as countfile:
        num_lines = sum(1 for line in countfile)
    countfile.close()

    if (num_lines > MAXRAD) and args.warning:
        print('WARNING: File ',filename,' Radius Too Large...Skipping')
        continue

##
## If we are excluding the last 90% (per Davis & et.al. 2012), make that
##   change here.
##

    if DEBUG > 0:
        print('Read num_lines: ',num_lines)

    if EXCLUDE:
        num_lines=int(float(num_lines)*0.90)

    if DEBUG > 0:
        print('New num_lines: ',num_lines)

##
## Check the start and end arguments and set the loop values
##

    start=BAR
    bar_method='BAR'

    if args.nobar:
        start=1
        bar_method='None'
    if args.start:
        if (args.start > num_lines) and args.warning:
            print('WARNING: Start for ',filename,' > End Radius...Ignoring')
        else:
            start=args.start
            bar_method='Man'

    end=num_lines
    if args.end:
        if (args.end > num_lines) and args.warning:
            print('WARNING: End for ',filename,' Beyond End Radius...Ignoring')
        else:
            end=args.end

    if DEBUG > 0:
        print('New range is %4d to %4d' % (start,end))

##
## Create the Arrays for The Data For all 7 Files for Each Image.  Why do that
##   here?  Because if we pass matplotlib an array that has extra entries at
##   end (even if they are initialized to 0.0), the plots turn out incorrect.
##   So we get the exact number for the radius and then size the arrays
##   appropriately.
##
##    radius     - Contains the radius from the center (in pixels)
##    real       - Sum of FFT real components for all modes and freq
##    imaginary  - Sum of FFT imaginary components for all modes and freq
##    raw_real   - Contains the real components for all modes, freq, and radii
##    raw_imag   - Contains the imaginary components all modes, freq, and radii
##    frequency  - Frequency values used in data files
##    peak       - Peak value for each annuli used for error calculations
##
            
    radius=np.arange(start=1, stop=num_lines+1, step=1)
    real=np.full((7,401),0.0)
    imaginary=np.full((7,401),0.0)
    raw_real=np.full((7,num_lines,401),0.0)
    raw_imag=np.full((7,num_lines,401),0.0)
    frequency=np.arange(start=-50.0,stop=50.25,step=0.25)
    peak=np.full((num_lines),-255.0)

##
## Arrays Needed for Plotting
##

    if args.plot:
        style=['solid','dashed','dashdot','dotted','-.',':']
        label=['m = 1','m = 2','m = 3','m = 4','m = 5','m = 6']

##
## Open each of the files in order to fill the arrays
##

    datafile=d_prefix+'/'+'outi'

    ind=start
    index=0
    N=0.0

    while (ind<= end):
        for mode in range(1,7):

            data=datafile+str(ind)+'_m'+str(mode)+'.rip'

            if (not os.path.exists(data)) and args.warning:
                print('WARNING: Could not open file: ',data)
                continue

##
## Read the data file lines
##

            N+=1.0
            with open(data, encoding='windows-1252') as f:
                f_lines=f.readlines()

##
## Process each line and check for headers or nan values.  It assumes that the
##   first two entries in the <whatever>.rip file are the radius and
##   FFT normalization value.   We check that with nval and rval flags. 
##
## The other challenge is that the value alternate between real and imaginary
##   values.  To read them, we implement a software flip-flop (flp) and 
##   alternate it.
##

            counter=0
            nval=False
            rval=False
            flp=0
            p=1

            for line in f_lines:

                if not rval:
                    rval=True
                    continue

                if not nval:
                    norma=float(line)
                    nval=True
                    continue

                f=float(line)

                if (math.isnan(f)) or (math.isinf(f)):
                    f=0.0

                if flp==0:
                    real[mode][counter]+=f
                    raw_real[mode][index][counter]=f
                else:
                    imaginary[mode][counter]+=f
                    raw_imag[mode][index][counter]=f
                    counter+=1

                flp=flp^p

                if DEBUG > 2:
                    print('Index',index,' Mode ',mode,'Value ',f)

        ind+=1
        index+=1

##
## Determine the amplitudes from the data
##

    amp=np.sqrt((real*real)+(imaginary*imaginary))
    raw_amp=np.sqrt((raw_real*raw_real)+(raw_imag*raw_imag))

##
## Find the maximum amplitude and associated frequency
##

    max_amp=np.amax(amp,axis=1)
    findex=np.argmax(amp,axis=1)

##
## Find the maximum amplitude (needed for plotting no matter which mode option
##   is selected).
##

    mag_mode=np.argmax(max_amp)
    highest=np.max(max_amp)

##
## Find the best mode based on -a option, ARMS value, or maximum amplitude
##   (in that priority order)
##

    if args.arms:
        hmode=args.arms
        mode_method='Man'
    elif ARMS > 0 and not args.magnitude:
        hmode=ARMS
        mode_method='ARMS'
    else:
        hmode=mag_mode
        mode_method='Amp'

##
## Determine the pitch angle from the highest mode
##

    pa=math.atan2(float(hmode),frequency[int(findex[hmode])])*(1.0/(3.1415926/180.0))
    if abs(pa) > 90.0:
        pa=pa-180.0

##
## Determine the peak amplitude for each annulus in the highest mode
##

    for l in range(0,end):
        for i in range(0,401):
            if raw_amp[hmode][l][i] > peak[l]:
                peak[l]=i

##
## Determine the variance for the curve (from the peak value for each annulus)
##

    var=0.0
    for l in range(0,end):
        val=math.atan2(-float(hmode),frequency[int(peak[l])])*(1.0/(3.1415926/180.0))
        if abs(val) > 90.0:
            val=val+180.0
        var+=(val-pa)**2.0
    std=math.sqrt(var/end)

    vm=std/math.sqrt(end)

##
## Determine the inherent error in the FFT measurement (per Davis, et. al. 2012)
##

    apa=abs(pa)
    if hmode==1:
        fft_err=(-4.0e-5*(apa**3.0))+(0.0058*(apa**2.0))+(0.0137*apa)+0.0234
    if hmode==2:
        fft_err=(-2.0e-5*(apa**3.0))+(0.0029*(apa**2.0))+(0.0084*apa)+0.0222
    if hmode==3:
        fft_err=(-1.4e-5*(apa**3.0))+(0.002*(apa**2.0))+(0.0064*apa)+0.0214
    if hmode==4:
        fft_err=(-1.0e-5*(apa**3.0))+(0.0015*(apa**2.0))+(0.0054*apa)+0.0207
    if hmode==5:
        fft_err=(-9.0e-6*(apa**3.0))+(0.0012*(apa**2.0))+(0.0046*apa)+0.02
    if hmode==6:
        fft_err=(-7.0e-6*(apa**3.0))+(0.001*(apa**2.0))+(0.0041*apa)+0.0191

    tot_err=math.sqrt((vm**2.0)+(fft_err**2.0)) 

    result_file.write(prefix+'\t'+str(start)+'\t'+str(end)+'\t'+str(hmode)+'\t')
    result_file.write(str(pa)+'\t'+str(tot_err)+mode_method+'\t'+bar_method+'\n')


##
## PLOTTING SECTION
##
## Please note the figure name will not appear on the PDF page, so must use
##   a title line for each plot (unless they fixed this in newer versions).
##

    if args.plot:

##
## Load x-axis values for the plots, scaled by B-band resolution.  If this is 
##   for hurricane image, use the scale information.  This is just a convenient
##   place to do this.  It's not critical for the calculation loop.
##

##
## Create a PDF file for all the plot pages
##

        pp=PdfPages(prefix+'.pdf')

        f1=plt.figure('Summed Amplitude ('+VERSION+'):  '+prefix)

##
## Configure first subplot for all modes. Note we add 150 to the X-Axis.  This
##   is done to make it more readable as the legend box covers the right part
##   of the plot.
##

        plt.subplot2grid((2,2),(0,0), colspan=2)
        plt.title('Summed Amplitude ('+VERSION+'):  '+prefix)
        plt.xlabel('Frequency')
        plt.ylabel('Amplitude')
##        plt.xlim(-50.0,50.0*1.3)
        plt.xlim(-6.0,6.0*1.3)
        plt.ylim(0,highest+(highest/8.0))
##        plt.axvline(0.0,color='k',lw=1.5)
        plt.axvline(0.0,color='k',lw=0.25)

##
## Cycle through modes 1-6 and add the data to the subplot.
##

        for j1 in range(1,7):
            plt.plot(frequency,amp[j1],ls=style[j1-1],label=label[j1-1])

##
## Add the legend information
##

        legend = plt.legend(loc='upper right', shadow=True)
        frame = legend.get_frame()
        frame.set_facecolor('0.90')
        for lab in legend.get_texts():
            lab.set_fontsize('small')

        plt.show()
        f1.savefig(pp, format='pdf')

        pp.close()

        plt.close(f1)

##
## Deallocate the arrays
##

    del(radius)
    del(max_amp)
    del(raw_amp)
    del(raw_real)
    del(raw_imag)
    del(amp)
    del(real)
    del(imaginary)
    del(findex)
    del(frequency)
    del(peak)

    if args.plot:
        del(style)
        del(label)

##
## Close output file
##

result_file.close()

