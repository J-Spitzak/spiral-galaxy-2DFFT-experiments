#!/usr/bin/env python3

##
## P2FILTER - Create Set of Files to Show Filter Effects
##
##
## Program apply various filters/paramters to FITS files.  The files 
##   created are:
##
##      -Multiple with the CV3 BilateralFilter applied amd their filenames
##         *  Use a base value of radius 9 and sigma space of 75,75, <>_base
##         *  Vary the base value from 3-12, <>_base_g<>
##         *  Vary the sigma space value from 15-135, <>_base_w<>
##
##      -Multiple with the CV3 LCE (CLAHE) filter applied amd their filenames
##         *  Use a sigma clip value of 2.0 and grid size of 75,75, <>_lce
##         *  Vary the sigma clip value from 1.0-7.0, <>_lce_<>
##         *  Vary the grid size value from 3-13, <>_lce_<>x<>
##
##
## Version 1.1  16-Feb-2019
##
##
## Authors:  Ian Hewitt & Dr. Patrick Treuthardt,
##           NC Museum of Natural Sciences,
##           Astronomy & Astrophysics Lab,
##           Raleigh, NC USA.
##           http://github.com/treuthardt/P2DFFT
##
##
## LICENSE
##
## P2DFFT Spiral Galaxy Arm Pitch Angle Analysis Suite
## Copyright (c) 2016-2019  Ian B. Hewitt & Dr. Patrick Treuthardt
##
## The program is free software:  you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by the Free
## Software Foundation, version 3.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
## details.
##
## You should have received a copy of the GNU General Public License along with
## this program.  If not, see < https://www.gnu.org/licenses >.
##
## The authors can be contacted at:
##
##      North Carolina Museum of Natural Sciences
##      Astronomy & Astrophysics Laboratory
##      11 West Jones Street
##      Raleigh, NC, 27601  USA
##      +1.919.707.9800
##
##      -- or --
##
##      patrick.treuthardt@naturalsciences.org
##
##
## Usage: p2filter <file> [<file>...]
##
##   You must specify at least one argument.
##
##   <files>         (Required) The filname of the FITS file(s) to be
##                   processed.  Can be multiple/wildcard values.
##
##
##  Revision History:
##         V1.1 - 16-Feb-2019 - Update comments and prequisites
##         V1.0 - 01-Aug-2018 - Initial version
##
##
##  Requirements/Environment:
##
##     Python 3.x
##     numpy (tested with python3-numpy) 
##     astropy.io (tested with python3-astropy) 
##     OpenCV2 libraries (pip3 install opencv-python)
##


import os
import sys
import argparse
import cv2

##
## Import NUMPY and FITS Libraries
##

import numpy as np
from astropy.io import fits

##
## MAIN() CODE BLOCK
##

##
## Get Command Line Arguments
##

options = argparse.ArgumentParser(description="This Utility Will Boost the Contrast of a FITS Image")
options.add_argument('files',help='List of FITS Files', nargs='+')
args=options.parse_args()

##
## Loop for all arguments
##

num=0
err=0

for item in args.files:
    num+=1

##
## Check to see if file exists, since the FITS routines do not handle errors
##   gracefully
##

    if not os.path.isfile(item):
        print("WARNING:  File ",item," Not Found...Skipping")
        continue

    arg_path=os.path.abspath(item)
    arg_file=os.path.basename(item)
    arg_pair=os.path.splitext(arg_file)
    if (arg_pair[1] == '.fits') or (arg_pair[1] == '.fts'):
        arg_file=arg_pair[0]

##
## Open FITS file and get dimensions
##

    file=fits.open(item)

    y=file[0].header['NAXIS1']
    x=file[0].header['NAXIS2']

##
## Create a an empty pixel array.  This array will hold all the unique pixel
##   values present in the image.
##

    pix=np.zeros([x,y],dtype=np.float32)

##
## Load pix[] will all the values present in the image for processing
##

    for i in range(0,x):
        for j in range(0,y):
            pix[i][j]=file[0].data[i][j]

##
## Drop uppermost and lowermost 5%
##

    hi=np.percentile(pix,95)
    lo=np.percentile(pix,5)

    for i in range(0,x):
        for j in range(0,y):
            if pix[i][j] > hi:
                pix[i][j]=hi
            if pix[i][j] < lo:
                pix[i][j]=lo

##
## Perform Bilateral Filtering on Image and Measure Contrast
##

    base=cv2.bilateralFilter(pix,9,75,75)
    base_g3=cv2.bilateralFilter(pix,3,75,75)
    base_g6=cv2.bilateralFilter(pix,6,75,75)
    base_g12=cv2.bilateralFilter(pix,12,75,75)
    base_w15=cv2.bilateralFilter(pix,9,15,15)
    base_w35=cv2.bilateralFilter(pix,9,35,35)
    base_w115=cv2.bilateralFilter(pix,9,115,115)
    base_w135=cv2.bilateralFilter(pix,9,135,135)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=base[i][j]
    str='rm -f '+'base_'+item
    os.system(str)
    outfile='base_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=base_g3[i][j]
    str='rm -f '+'base_g3_'+item
    os.system(str)
    outfile='base_g3_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=base_g6[i][j]
    str='rm -f '+'base_g6_'+item
    os.system(str)
    outfile='base_g6_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=base_g12[i][j]
    str='rm -f '+'base_g12_'+item
    os.system(str)
    outfile='base_g12_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=base_w15[i][j]
    str='rm -f '+'base_w15_'+item
    os.system(str)
    outfile='base_w15_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=base_w35[i][j]
    str='rm -f '+'base_w35_'+item
    os.system(str)
    outfile='base_w35_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=base_w115[i][j]
    str='rm -f '+'base_w115_'+item
    os.system(str)
    outfile='base_w115_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=base_w135[i][j]
    str='rm -f '+'base_w135_'+item
    os.system(str)
    outfile='base_w135_'+item
    file.writeto(outfile)

##
## Local Contrast Enhancement
##

    intdata=base.astype(np.uint16)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=intdata[i][j]
    str='rm -f '+'intdata_'+item
    os.system(str)
    outfile='intdata_'+item
    file.writeto(outfile)

    clahe=cv2.createCLAHE(clipLimit=2.0, tileGridSize=(3,3))
    lce=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=1.5, tileGridSize=(3,3))
    lce_15=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=1.0, tileGridSize=(3,3))
    lce_10=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=2.5, tileGridSize=(3,3))
    lce_25=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=3.0, tileGridSize=(3,3))
    lce_30=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=4.0, tileGridSize=(3,3))
    lce_40=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=5.0, tileGridSize=(3,3))
    lce_50=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=6.0, tileGridSize=(3,3))
    lce_60=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=7.0, tileGridSize=(3,3))
    lce_70=clahe.apply(intdata)

    clahe=cv2.createCLAHE(clipLimit=2.0, tileGridSize=(5,5))
    lce_5x5=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=2.0, tileGridSize=(7,7))
    lce_7x7=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=2.0, tileGridSize=(9,9))
    lce_9x9=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=2.0, tileGridSize=(11,11))
    lce_11x11=clahe.apply(intdata)
    clahe=cv2.createCLAHE(clipLimit=2.0, tileGridSize=(13,13))
    lce_13x13=clahe.apply(intdata)

##
## Write FITS output files
##

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce[i][j]
    str='rm -f '+'lce_'+item
    os.system(str)
    outfile='lce_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_15[i][j]
    str='rm -f '+'lce_15_'+item
    os.system(str)
    outfile='lce_15_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_10[i][j]
    str='rm -f '+'lce_10_'+item
    os.system(str)
    outfile='lce_10_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_25[i][j]
    str='rm -f '+'lce_25_'+item
    os.system(str)
    outfile='lce_25_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_30[i][j]
    str='rm -f '+'lce_30_'+item
    os.system(str)
    outfile='lce_30_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_40[i][j]
    str='rm -f '+'lce_40_'+item
    os.system(str)
    outfile='lce_40_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_50[i][j]
    str='rm -f '+'lce_50_'+item
    os.system(str)
    outfile='lce_50_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_60[i][j]
    str='rm -f '+'lce_60_'+item
    os.system(str)
    outfile='lce_60_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_70[i][j]
    str='rm -f '+'lce_70_'+item
    os.system(str)
    outfile='lce_70_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_5x5[i][j]
    str='rm -f '+'lce_5x5_'+item
    os.system(str)
    outfile='lce_5x5_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_7x7[i][j]
    str='rm -f '+'lce_7x7_'+item
    os.system(str)
    outfile='lce_7x7_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_9x9[i][j]
    str='rm -f '+'lce_9x9_'+item
    os.system(str)
    outfile='lce_9x9_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_11x11[i][j]
    str='rm -f '+'lce_11x11_'+item
    os.system(str)
    outfile='lce_11x11_'+item
    file.writeto(outfile)

    for i in range(0,x):
        for j in range(0,y):
            file[0].data[i][j]=lce_13x13[i][j]
    str='rm -f '+'lce_13x13_'+item
    os.system(str)
    outfile='lce_13x13_'+item
    file.writeto(outfile)

